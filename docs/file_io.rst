********
File I/O
********

:Author: Kyle M. Douglass
:Contact: kyle.m.douglass@gmail.com
:organization: École Polytechnique Fédérale de Lausanne (EPFL)
:revision: $Revision: 0 $
:date: 2017-01-24

:abstract:

   A brief explanation of file input and output in B-Store.
   
.. meta::
   :keywords: b-store, io
   :description lang=en: Documentation on B-Store file I/O.
	      
.. contents:: Table of Contents

I/O in B-Store
==============

Overview
--------

B-Store uses two types of objects to read files from the disk that
contain localization microscopy data:

1. Parsers
2. Readers

A Parser reads the filename of a file and assigns IDs to it that are
used to identify the dataset inside a HDF file. A Reader reads the
actual data contained in the file and converts it to an internal
Python datatype. This datatype serves as an intermediary step before
saving the data to the HDF file.

Readers are convenience tools that allow the same functionality for
reading files to be applied to multiple datasetTypes. For instance,
the `Localizations`, `FiducialTracks`, and `AverageFiducial`
datasetTypes are all internally represented as Pandas DataFrames. They
also allow B-Store to be easily extended to new types of files. The
purpose in this is that users can store their localization microscopy
data regardless of the software program that generated it. All that
would be needed would be a new Reader instance that would know how to
interpret the data in the files.

Important Note
--------------

Reader functionality was added in version 1.1.0 and is not yet fully
integrated with HDFDatastore.build(). This will follow in upcoming
versions.

There is also no arbitrary file output as of version 1.1.0, except for
that generated by `CSVBatchProcessor`_. This too should change in
upcoming versions.

.. _CSVBatchProcessor: http://b-store.readthedocs.io/en/latest/bstore.html#bstore.batch.CSVBatchProcessor

Built-in Parsers
----------------

Two types of Parsers are currently built-in to B-Store:

1. `SimpleParser`_
2. `PositionParser`_

The SimpleParser interprets files names in the format
PREFIX_ACQID.<file_type> where the prefix and acquisition ID are
separated by an underscore. The PositionParser splits up a filename by
a specified character, e.g. '_', and assigns DatasetIDs based on the
elements of the filename occupying integer positions separated by this
character, starting with 0 at the left-most position.

.. _SimpleParser: http://b-store.readthedocs.io/en/latest/bstore.html#bstore.parsers.SimpleParser
.. _PositionParser: http://b-store.readthedocs.io/en/latest/bstore.html#bstore.parsers.PositionParser

Built-in Readers
----------------

There are currently two Readers built-in to B-Store:

1. `CSVReader`_
2. `JSONReader`_

These readers use functionality from `Pandas`_ and read generic .csv
and .json files, respectively. They are highly customizable with
optional parameters provided by Pandas `read_csv`_ and `read_json`_
functions. This means that anything you can load with these two
functions, you can load into B-Store.

.. _CSVReader: http://b-store.readthedocs.io/en/latest/bstore.html#bstore.readers.CSVReader
.. _JSONReader: http://b-store.readthedocs.io/en/latest/bstore.html#bstore.readers.JSONReader
.. _Pandas: http://pandas.pydata.org/
.. _read_csv: http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html
.. _read_json: http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_json.html

Code Examples for Custom Parsers/Readers
========================================

The following Jupyter notebooks demonstrate how to write custom
Parsers and Readers.

1. https://github.com/kmdouglass/bstore/blob/master/examples/Tutorial%203%20-%20Writing%20custom%20parsers.ipynb
2. https://github.com/kmdouglass/bstore/blob/master/examples/Tutorial%204%20-%20Writing%20custom%20readers.ipynb
