#!/usr/bin/env python

# © All rights reserved. ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE,
# Switzerland, Laboratory of Experimental Biophysics, 2016
# See the LICENSE.txt file for more details.

from tkinter import Button, Entry, LabelFrame, Menu, Message, Tk, Toplevel
from tkinter import Checkbutton, Grid, IntVar, Radiobutton,Scrollbar, Text
from tkinter import N, S, E, W, DISABLED, END
from tkinter.filedialog import askdirectory, asksaveasfilename

import bstore.config as cfg
import bstore.datasetTypes as dsTypes
import bstore.parsers as parsers
import webbrowser
import inspect

aboutMessage = '''B-Store
Version {:s}
by Kyle M. Douglass

Laboratory of Experimental Biophysics
ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE
© 2016 All rights reserved.'''.format(cfg.__bstore_Version__)

docsURL = 'http://b-store.readthedocs.io/en/latest/'

"""Menu methods
-------------------------------------------------------------------------------
"""
def about():
    top = Toplevel()
    top.title('About B-Store')
    
    msg = Message(top, text = aboutMessage, width = 400)
    msg.pack()
    
    button = Button(top, text='Close', command=top.destroy)
    button.pack()

def _buildDatabase(filenameStrings):
    print(filenameStrings)

def newDatabase():
    top = Toplevel()
    top.title('Create a New B-Store Database')
    frames = {'DatabaseFilename'   : 0,
              'SelectDatasetTypes' : 1,
              'BuildButton'        : 4,
              'SearchDir'          : 2,
              'SelectParser'       : 3}
    Grid.rowconfigure(top, frames['DatabaseFilename'],   weight = 2)
    Grid.rowconfigure(top, frames['SelectDatasetTypes'], weight = 1)
    Grid.rowconfigure(top, frames['BuildButton'],        weight = 0)
    Grid.rowconfigure(top, frames['SearchDir'],          weight = 2)
    Grid.rowconfigure(top, frames['SelectParser'],       weight = 2)
    Grid.columnconfigure(top, 0, weight=1)

    # Filename and path    
    f = Frame_DatabaseFilename(master = top, padx = 5, pady = 5,
                               text = 'Path and filename for the new database')
    f.grid(row = frames['DatabaseFilename'])
    
    # Select dataset types
    selectTypes = Frame_SelectDatasetTypes(master = top, padx = 5, pady = 5,
                                           text = 'Select dataset types')
    selectTypes.grid(row = frames['SelectDatasetTypes'])
    
    # Select search path
    s = Frame_SearchDirectory(master = top, padx = 5, pady = 5,
                              text = 'Directory containing input data files')
    s.grid(row = frames['SearchDir'])
    
    # Select parser
    p = Frame_SelectParser(master = top, padx = 5, pady = 5,
                           text = 'Select and configure the filename parser')
    p.grid(row = frames['SelectParser'], sticky = E+W)
    
    build = Button(master = top, text = 'Build',
                   command=lambda: _buildDatabase(selectTypes.get()))
    build.grid(row = frames['BuildButton'])
    
def openDatabase():
    raise NotImplementedError()

def openDocs():
    webbrowser.open_new(docsURL)

"""Frames
-------------------------------------------------------------------------------
"""
class Frame_DatabaseFilename(LabelFrame):
    """Select a filename and path for the new Database file.
    
    Attributes
    ----------
    filename : str
        The full path and filename to the database file.
    
    """
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.filename = None
        
        self.grid(sticky=W+E+N+S)
        
        self.button = Button(self, text="Browse", command=self.loadFile, width=10)
        self.button.grid(row=1, column=1, padx = 5, pady = 5, sticky = W)        
        
        self.entry = Entry(self, width = 50)
        self.entry.delete(0, END)
        self.entry.insert(0, 'Enter a path to a new database file...')
        self.entry.grid(row = 1, column = 0, padx = 5, pady = 5, sticky = W)

    def loadFile(self):
        fname = asksaveasfilename(filetypes=(('HDF5 files', '*.h5'),
                                             ('All files', '*.*')),
                                  title       = 'Select a new file...',
                                  initialfile = 'database.h5')
        if fname:
            self.filename = fname
            self.entry.delete(0, END)
            self.entry.insert(0, fname)
            
class Frame_SearchDirectory(LabelFrame):
    """Select a path to search for files to build the database with.
    
    Attributes
    ----------
    searchPath : str
    
    """
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.searchPath = None
        
        self.grid(sticky=W+E+N+S)
        
        self.button = Button(self, text="Browse", command=self.loadFile, width=10)
        self.button.grid(row=1, column=1, padx = 5, pady = 5, sticky = W)        
        
        self.entry = Entry(self, width = 50)
        self.entry.delete(0, END)
        self.entry.insert(0, 'Enter the search path for the database build...')
        self.entry.grid(row = 1, column = 0, padx = 5, pady = 5, sticky = W)

    def loadFile(self):
        fname = askdirectory(title = 'Select a search directory...',
                             mustexist = True)
        if fname:
            self.searchPath = fname
            self.entry.delete(0, END)
            self.entry.insert(0, fname)
            
class Frame_SelectDatasetTypes(LabelFrame):
    """Select the dataset types to include in the database.
    
    References
    ----------
    [1] http://stackoverflow.com/questions/5860675/variable-size-list-of-checkboxes-in-tkinter
    
    """
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
        
        self.vsb = Scrollbar(self, orient="vertical")
        self.text = Text(self, height = 10,
                         yscrollcommand=self.vsb.set,
                         bg = self.master.cget('bg'))
        self.vsb.config(command=self.text.yview)
        self.vsb.pack(side="right", fill="y")
        self.text.pack(side="left", fill="both", expand=True)
        
        # Create the list of checkboxes
        self._listOfTypes = []
        for currType in dsTypes.__all__:
            v = IntVar(value = 1)
            cb = Checkbutton(self, text = '%s' % currType, anchor = W,
                             width = 15, variable = v)
            cb.var = v # Easy access to checkbox's current value
            
            e  = Entry(self)
            e.delete(0, END)
            e.insert(0, '<suffix>.<file_extension>')
            
            self._listOfTypes.append((cb, e))
            self.text.window_create('end', window=cb)
            self.text.window_create('end', window=e)
            self.text.insert("end", "\n") # Forces one checkbox per line
        
        # This MUST follow insertion and positioning of the checkboxes/entries
        self.text.config(state = DISABLED)
    
    def get(self):
        """Returns information about the frame.
        
        Returns
        -------
        filenameStrings : dict
            Key-value pairs of the dataset types and their filename suffixes.
            
        """
        filenameStrings = {k.cget('text') : v.get()
                               for k, v in self._listOfTypes
                               if k.var and v.get()
                          }
        return filenameStrings
        
class Frame_SelectParser(LabelFrame):
    """Selects the parser to use during the database build.
    
    Attributes
    ----------
    
    """
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
        # Get a list of all available parsers
        pList = [(name, parser) for name, parser
                 in inspect.getmembers(parsers, inspect.isclass)
                 if issubclass(parser, parsers.Parser) and name != 'Parser']
    
        v = IntVar(value = 0)
    
        for index, (text, _) in enumerate(pList):
            b = Radiobutton(self, text=text,
                            variable = v, value=index)
            b.pack(anchor=W)
    
    def get():
        pass
        
"""Main loop
-------------------------------------------------------------------------------
"""
if __name__ == '__main__':
    root = Tk()
    
    menubar = Menu(root)
    
    filemenu = Menu(menubar, tearoff = 0)
    filemenu.add_command(label = 'New...',  command = newDatabase)
    filemenu.add_command(label = 'Open...', command = openDatabase)
    filemenu.add_separator()
    filemenu.add_command(label = 'Quit',    command = root.quit)
    menubar.add_cascade(label ='File', menu=filemenu)
    
    helpmenu = Menu(menubar, tearoff = 0)
    helpmenu.add_command(label = 'Documentation', command = openDocs)
    helpmenu.add_separator()
    helpmenu.add_command(label = 'About...', command = about)
    menubar.add_cascade(label = 'Help', menu = helpmenu)
    
    root.config(menu = menubar)
    root.mainloop()